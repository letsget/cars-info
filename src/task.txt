

"https://rawgit.com/Varinetz/e6cbadec972e76a340c41a65fcc2a6b3/raw/90191826a3bac2ff0761040ed1d95c59f14eaf26/frontend_test_table.json"

1. TableBody: useEffect (он уже у тебя есть), в нем делаешь fetch машин (уже есть).
Потом .then вызываешь функцию dispatch и в него передаешь action: 'CARS_LOADED_SUCCESS' и загруженные машины.
useEffect должен вызываться только при 1-ой загрузке компонента (dependencies).
2. В reducer пишешь switch и делаешь case 'CARS_LOADED_SUCCESS'. Присваиваешь payload из action в state (т.е. загружаешь машины в стейт).
3. Initial state делаешь пустым массивом, [].

Машины опять должны загрузиться и появиться.

Тестируешь - неправильный адрес - машины пропадают. Указываешь правильный - появляются.
Поскольку у тебя await, надо использовать try/catch иначе будет ошибка при неправильном адресе.


// Новый таск

1. Заменить dispatch на mapDispatchToProps:
dispatch(removeCar(id)) === removeCar(id);
1.1 импортируем из actions экшн-креейторы.
1.2 пишем mapDispatchToProps = {
    то_что_придет_в_пропс_компонента: экшн_креейтор
}
например
mapDispatchToProps = {
    deleteCar: removeCar
}
deleteCar - функция, которая придет в пропсы компонента
removeCar - экшн креейтор

Заменить все dispatch на mapDispatchToProps

2. То что получится, перенести state из App в форму Form. Что не получится - найти места где еще используется, с этим разбираться будем отдельно.
3. Поправить баг: если статус не выбираешь, то в таблицу при сабмите заносится статус = "статус".